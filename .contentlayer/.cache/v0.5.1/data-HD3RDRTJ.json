{
  "cacheItemsMap": {
    "docs/index.mdx": {
      "document": {
        "title": "Astro",
        "body": {
          "raw": "\n### Create project\n\nStart by creating a new Astro project:\n\n```bash\nnpm create astro@latest\n```\n\n### Configure your Astro project\n\nYou will be asked a few questions to configure your project:\n\n```txt showLineNumbers\n- Where should we create your new project? ./your-app-name\n- How would you like to start your new project? Choose a template\n- Do you plan to write TypeScript? Yes\n- How strict should TypeScript be? Strict\n- Install dependencies? Yes\n- Initialize a new git repository? (optional) Yes/No\n```\n\n### Add React to your project\n\nInstall React using the Astro CLI:\n\n```bash\nnpx astro add react\n```\n\n<Callout className=\"mt-4\">\n\nAnswer `Yes` to all the question prompted by the CLI when installing React.\n\n</Callout>\n\n### Add Tailwind CSS to your project\n\n```bash\nnpx astro add tailwind\n```\n\n<Step>Create a `styles/globals.css` file in the `src` folder.</Step>\n\n```css title=\"styles/globals.css\" showLineNumbers\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n<Step>Import the `globals.css` file</Step>\n\nImport the `styles/globals.css` file in the `src/pages/index.astro` file:\n\n```ts title=\"src/pages/index.astro\" showLineNumbers\n---\nimport '@/styles/globals.css'\n---\n```\n\n<Step>Update `astro.config.mjs` and set `applyBaseStyles` to `false`</Step>\n\nTo prevent serving the Tailwind base styles twice, we need to tell Astro not to apply the base styles, since we already include them in our own `globals.css` file. To do this, set the `applyBaseStyles` config option for the tailwind plugin in `astro.config.mjs` to `false`.\n\n```js title=\"astro.config.mjs\" {3-5} showLineNumbers\nexport default defineConfig({\n  integrations: [\n    tailwind({\n      applyBaseStyles: false,\n    }),\n  ],\n})\n```\n\n### Edit tsconfig.json file\n\nAdd the following code to the `tsconfig.json` file to resolve paths:\n\n```ts title=\"tsconfig.json\" {4-9} showLineNumbers\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n### Run the CLI\n\nRun the `shadcn` init command to setup your project:\n\n```bash\nnpx shadcn@latest init\n```\n\n### That's it\n\nYou can now start adding components to your project.\n\n```bash\nnpx shadcn@latest add button\n```\n\nThe command above will add the `Button` component to your project. You can then import it like this:\n\n```astro {2,10} showLineNumbers\n---\nimport { Button } from \"@/components/ui/button\"\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<Button>Hello World</Button>\n\t</body>\n</html>\n```",
          "code": "var Component=(()=>{var u=Object.create;var c=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!y.call(t,i)&&i!==o&&c(t,i,{get:()=>e[i],enumerable:!(r=g(e,i))||r.enumerable});return t};var b=(t,e,o)=>(o=t!=null?u(f(t)):{},l(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>l(c({},\"__esModule\",{value:!0}),t);var d=w((S,s)=>{s.exports=_jsx_runtime});var N={};j(N,{default:()=>p,frontmatter:()=>C});var n=b(d()),C={title:\"Astro\",description:\"Install and configure Astro.\"};function a(t){let e={code:\"code\",h3:\"h3\",p:\"p\",pre:\"pre\",...t.components},{Callout:o,Step:r}=e;return o||h(\"Callout\",!0),r||h(\"Step\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h3,{id:\"create-project\",children:\"Create project\"}),`\n`,(0,n.jsx)(e.p,{children:\"Start by creating a new Astro project:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm create astro@latest\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"configure-your-astro-project\",children:\"Configure your Astro project\"}),`\n`,(0,n.jsx)(e.p,{children:\"You will be asked a few questions to configure your project:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-txt\",children:`- Where should we create your new project? ./your-app-name\n- How would you like to start your new project? Choose a template\n- Do you plan to write TypeScript? Yes\n- How strict should TypeScript be? Strict\n- Install dependencies? Yes\n- Initialize a new git repository? (optional) Yes/No\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"add-react-to-your-project\",children:\"Add React to your project\"}),`\n`,(0,n.jsx)(e.p,{children:\"Install React using the Astro CLI:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npx astro add react\n`})}),`\n`,(0,n.jsx)(o,{className:\"mt-4\",children:(0,n.jsxs)(e.p,{children:[\"Answer \",(0,n.jsx)(e.code,{children:\"Yes\"}),\" to all the question prompted by the CLI when installing React.\"]})}),`\n`,(0,n.jsx)(e.h3,{id:\"add-tailwind-css-to-your-project\",children:\"Add Tailwind CSS to your project\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npx astro add tailwind\n`})}),`\n`,(0,n.jsxs)(r,{children:[\"Create a \",(0,n.jsx)(e.code,{children:\"styles/globals.css\"}),\" file in the \",(0,n.jsx)(e.code,{children:\"src\"}),\" folder.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`})}),`\n`,(0,n.jsxs)(r,{children:[\"Import the \",(0,n.jsx)(e.code,{children:\"globals.css\"}),\" file\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Import the \",(0,n.jsx)(e.code,{children:\"styles/globals.css\"}),\" file in the \",(0,n.jsx)(e.code,{children:\"src/pages/index.astro\"}),\" file:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`---\nimport '@/styles/globals.css'\n---\n`})}),`\n`,(0,n.jsxs)(r,{children:[\"Update \",(0,n.jsx)(e.code,{children:\"astro.config.mjs\"}),\" and set \",(0,n.jsx)(e.code,{children:\"applyBaseStyles\"}),\" to \",(0,n.jsx)(e.code,{children:\"false\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To prevent serving the Tailwind base styles twice, we need to tell Astro not to apply the base styles, since we already include them in our own \",(0,n.jsx)(e.code,{children:\"globals.css\"}),\" file. To do this, set the \",(0,n.jsx)(e.code,{children:\"applyBaseStyles\"}),\" config option for the tailwind plugin in \",(0,n.jsx)(e.code,{children:\"astro.config.mjs\"}),\" to \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`export default defineConfig({\n  integrations: [\n    tailwind({\n      applyBaseStyles: false,\n    }),\n  ],\n})\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"edit-tsconfigjson-file\",children:\"Edit tsconfig.json file\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Add the following code to the \",(0,n.jsx)(e.code,{children:\"tsconfig.json\"}),\" file to resolve paths:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"run-the-cli\",children:\"Run the CLI\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Run the \",(0,n.jsx)(e.code,{children:\"shadcn\"}),\" init command to setup your project:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npx shadcn@latest init\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"thats-it\",children:\"That's it\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can now start adding components to your project.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npx shadcn@latest add button\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The command above will add the \",(0,n.jsx)(e.code,{children:\"Button\"}),\" component to your project. You can then import it like this:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-astro\",children:`---\nimport { Button } from \"@/components/ui/button\"\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<Button>Hello World</Button>\n\t</body>\n</html>\n`})})]})}function p(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(a,{...t})}):a(t)}function h(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(N);})();\n;return Component;"
        },
        "_id": "docs/index.mdx",
        "_raw": {
          "sourceFilePath": "docs/index.mdx",
          "sourceFileName": "index.mdx",
          "sourceFileDir": "docs",
          "contentType": "mdx",
          "flattenedPath": "docs"
        },
        "type": "Doc",
        "slug": "/docs",
        "slugAsParams": ""
      },
      "documentHash": "1726976866385",
      "hasWarnings": true,
      "documentTypeName": "Doc"
    }
  }
}
